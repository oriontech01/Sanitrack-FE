{"version":3,"file":"static/js/4613.ad0a50f5.chunk.js","mappings":"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","sources":["views/Admin/Facilities/AddLocation.js","views/Admin/Facilities/Facilities.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { Container, Typography, TextField, Button, Box } from \"@mui/material\";\r\nimport Slide from \"@mui/material/Slide\";\r\nimport axios from \"axios\";\r\n\r\nconst AddLocation = ({ isOpen, onRequestClose }) => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  const [postalCode, setPostalCode] = useState(\"\");\r\n  const token = localStorage.getItem(\"auth-token\");\r\n  const BASE_URL = process.env.REACT_APP_BASE_URL\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const res = await axios.post(\r\n        `${BASE_URL}/locations/add`,\r\n        {\r\n          country,\r\n          state,\r\n          city,\r\n          postal_code: postalCode,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      console.log(res.data);\r\n      alert(res.data.message);\r\n    } catch (error) {\r\n      alert(\"Error\", error);\r\n      console.log(error);\r\n    }\r\n    onRequestClose(); // Close the modal after submission\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      onClose={onRequestClose}\r\n      aria-labelledby=\"add-location-modal\"\r\n      aria-describedby=\"add-location-form\"\r\n      closeAfterTransition\r\n      sx={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}    \r\n      // Animate from the top\r\n      // Define the direction to 'down' for top to bottom animation\r\n      // Adjust the timeout for smoother animation\r\n      // Adjust the position for different top margin\r\n      TransitionComponent={Slide}\r\n      TransitionProps={{\r\n        direction: \"down\",\r\n        timeout: {\r\n          enter: 500,\r\n        },\r\n      }}\r\n    >\r\n      <Container\r\n        maxWidth=\"sm\"\r\n        sx={{\r\n          p: 4,\r\n          bgcolor: \"background.paper\",\r\n          transformOrigin: \"top\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n          Add a New Facility Location\r\n        </Typography>\r\n        <form onSubmit={handleSubmit}>\r\n          <Box sx={{ mb: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Country\"\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={(e) => setCountry(e.target.value)}\r\n            />\r\n          </Box>\r\n          <Box sx={{ mb: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"State/Province\"\r\n              variant=\"outlined\"\r\n              value={state}\r\n              onChange={(e) => setState(e.target.value)}\r\n            />\r\n          </Box>\r\n          <Box sx={{ mb: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"City\"\r\n              variant=\"outlined\"\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n            />\r\n          </Box>\r\n          <Box sx={{ mb: 2 }}>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Postal Code\"\r\n              variant=\"outlined\"\r\n              value={postalCode}\r\n              onChange={(e) => setPostalCode(e.target.value)}\r\n            />\r\n          </Box>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Add Location\r\n          </Button>\r\n        </form>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddLocation;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\r\nimport axios from \"axios\";\r\nimport { Container, Typography, Button, Box } from \"@mui/material\";\r\nimport { FaLocationDot } from \"react-icons/fa6\";\r\nimport AddLocation from \"./AddLocation\";\r\nimport Loader from \"component/Loader/Loader\";\r\n\r\nconst Facilities = () => {\r\n  const [locationData, setLocationData] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const token = localStorage.getItem(\"auth-token\");\r\n  const googleMapsApiKey = process.env.REACT_APP_GOOGLE_API_KEY;\r\n  const BASE_URL = process.env.REACT_APP_BASE_URL;\r\n\r\n  const containerStyle = {\r\n    width: \"800px\",\r\n    height: \"400px\",\r\n  };\r\n\r\n  const center = {\r\n    lat: 9.05785,\r\n    lng: 7.49508, // Longitude for Nigeria\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getFacilitiesLocation = async () => {\r\n      setLoading(true);\r\n      const res = await axios.get(\r\n        `${BASE_URL}locations/`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      const locations = res.data.data.allLocations;\r\n\r\n      for (const location of locations) {\r\n        const address = `${location.city}, ${location.state}, ${location.country}`;\r\n        const geoRes = await axios.get(\r\n          `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\r\n            address\r\n          )}&key=${googleMapsApiKey}`\r\n        );\r\n        const geoData = geoRes.data.results[0].geometry.location;\r\n        location.lat = geoData.lat;\r\n        location.lng = geoData.lng;\r\n      }\r\n\r\n      setLocationData(locations);\r\n      setLoading(false);\r\n    };\r\n\r\n    getFacilitiesLocation();\r\n  }, []);\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Container className=\"tracker-container\">\r\n      <Box className=\"location-header\" sx={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\r\n        <Typography variant=\"h2\">Facilities</Typography>\r\n        <Button onClick={() => setIsModalOpen(true)}  variant=\"contained\">Add Location</Button>\r\n      </Box>\r\n\r\n      <Box className=\"map-container\" justifyContent=\"center\" alignContent={\"center\"} display={\"flex\"} padding=\"20px\">\r\n        <LoadScript googleMapsApiKey={googleMapsApiKey}>\r\n          <GoogleMap\r\n            mapContainerClassName=\"google-map\"\r\n            mapContainerStyle={containerStyle}\r\n            center={center}\r\n            zoom={10}\r\n          >\r\n            {locationData.map((facility) => (\r\n              <Marker\r\n                key={facility._id}\r\n                position={{ lat: facility.lat, lng: facility.lng }}\r\n              />\r\n            ))}\r\n          </GoogleMap>\r\n        </LoadScript>\r\n      </Box>\r\n      <AddLocation\r\n        isOpen={isModalOpen}\r\n        onRequestClose={() => setIsModalOpen(false)}\r\n      />\r\n      {/* Add the legend */}\r\n      <Box className=\"legend\" sx={{ textAlign: \"center\", marginTop: 4 }}>\r\n        <Typography variant=\"h3\" sx={{ marginBottom: 2 }}>Legend</Typography>\r\n        <Box className=\"legend-item\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\r\n          <FaLocationDot fill=\"red\" />\r\n          <Typography variant=\"body1\">Facility Location</Typography>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Facilities;\r\n"],"names":["_ref","isOpen","onRequestClose","city","setCity","useState","country","setCountry","state","setState","postalCode","setPostalCode","token","localStorage","getItem","_jsx","Modal","open","onClose","closeAfterTransition","sx","display","alignItems","justifyContent","TransitionComponent","Slide","TransitionProps","direction","timeout","enter","children","_jsxs","Container","maxWidth","p","bgcolor","transformOrigin","Typography","variant","component","gutterBottom","onSubmit","async","e","preventDefault","res","axios","post","concat","process","postal_code","headers","Authorization","console","log","data","alert","message","error","Box","mb","TextField","fullWidth","label","value","onChange","target","Button","type","color","Facilities","locationData","setLocationData","isModalOpen","setIsModalOpen","loading","setLoading","googleMapsApiKey","useEffect","locations","get","allLocations","location","address","geoData","encodeURIComponent","results","geometry","lat","lng","getFacilitiesLocation","Loader","className","onClick","alignContent","padding","LoadScript","GoogleMap","mapContainerClassName","mapContainerStyle","width","height","center","zoom","map","facility","Marker","position","_id","AddLocation","textAlign","marginTop","marginBottom","gap","FaLocationDot","fill"],"sourceRoot":""}
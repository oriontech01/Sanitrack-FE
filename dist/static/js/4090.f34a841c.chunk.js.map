{"version":3,"file":"static/js/4090.f34a841c.chunk.js","mappings":"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","sources":["Hooks/useTask.js","views/Admin/Work Order/TaskDetails.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst useTask = () => {\r\n  const BASE_URL = process.env.REACT_APP_BASE_URL;\r\n  // const BASE_URL = process.env.REACT_APP_BASE_URL;\r\n  const [responseMessage, setResponseMessage] = useState();\r\n  const [unAssignedRooms, setUnAssignedRooms] = useState([]);\r\n  const [allCleaners, setAllCleaners] = useState([]);\r\n  const [allInspectors, setAllInspectors] = useState([]);\r\n  const [singleTaskDetail, setSingleTaskDetail] = useState([]);\r\n  const [cleaningItems, setCleaningItems] = useState([]);\r\n\r\n  const [allTasks, setAllTasks] = useState([]);\r\n  // eslint-disable-next-line no-unused-vars\r\n\r\n  const [activeCleaners, setActiveCleaners] = useState();\r\n  const [activeInspectors, setActiveInspectors] = useState();\r\n  const [activeCleaningItems,setActiveCleaningItems]=useState()\r\n  const [everyTask, setEveryTask] = useState();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const access_token = localStorage.getItem('auth-token');\r\n\r\n  const getUnAssignedRooms = async () => {\r\n    await axios\r\n      .get(`${BASE_URL}room/unassigned-rooms`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        console.log('====================================');\r\n        console.log(response);\r\n        console.log('====================================');\r\n        setUnAssignedRooms(response.data.data.roomsNotInTasks);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            console.log('An error with status 403 occured', data.message);\r\n            setResponseMessage(data.message);\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const getAllCleaners = async () => {\r\n    await axios\r\n      .get(`${BASE_URL}get-all-cleaner`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        setActiveCleaners(response.data.data.allCleaners.length);\r\n        setAllCleaners(response.data.data.allCleaners);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            console.log('An error with status 403 occured', data.message);\r\n            setResponseMessage(data.message);\r\n            // send user back to the login page!\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const getAllInspectors = async () => {\r\n    await axios\r\n      .get(`${BASE_URL}get-all-inspector`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        setActiveInspectors(response.data.data.allInspectors.length);\r\n        setAllInspectors(response.data.data.allInspectors);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            console.log('An error with status 403 occured', data.message);\r\n            setResponseMessage(data.message);\r\n            // navigate('/')\r\n            // send user back to the login page!\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n  const getCleaningItems = async () => {\r\n    await axios\r\n      .get(`${BASE_URL}cleaning-items`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        console.log(\"dang\",response);\r\n        setActiveCleaningItems(response.data.data.allItems.length);\r\n        console.log('aaa====================================');\r\n        console.log(response);\r\n        console.log('====================================');\r\n        setCleaningItems(response.data.data.allItems);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            console.log('An error with status 403 occured', data.message);\r\n            setResponseMessage(data.message);\r\n            // navigate('/')\r\n            // send user back to the login page!\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network errorasy:', error.message);\r\n        }\r\n      });\r\n  };\r\n  const addTask = async (roomId, cleanerId, inspectorId) => {\r\n    await axios\r\n      .post(\r\n        `${BASE_URL}task/create-task`,\r\n        {\r\n          inspectorId: inspectorId,\r\n          cleanerId: cleanerId,\r\n          roomId: roomId\r\n        },\r\n        { headers: { Authorization: `Bearer ${access_token}` } }\r\n      )\r\n      .then(response => {\r\n        // send user back to the task home page\r\n        navigate('/home/tasks');\r\n        // console.log(response.json())\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const getAllTasks = async () => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}task/get`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      });\r\n      //   console.log(\"Task retrieved\", response.data.data);\r\n      setEveryTask(response.data.data.allTasks.length);\r\n      setAllTasks(response.data.data.allTasks);\r\n    } catch (error) {\r\n      if (error.response) {\r\n        const { status, data } = error.response;\r\n        console.log('An error occurred', data.message || 'Error');\r\n        setResponseMessage(data.message || 'Error');\r\n\r\n        if (status === 403) {\r\n          // Use navigate to redirect\r\n          //   navigate('/'); // Make sure navigate is passed correctly if used outside of a component\r\n        }\r\n      } else {\r\n        console.log('Network error:', error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getTaskById = async taskId => {\r\n    await axios\r\n      .get(`${BASE_URL}task/get-single-task?taskId=${taskId}`, {\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        setSingleTaskDetail(response.data.data);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateTask = async (taskId, cleanerId, inspectorId, roomId) => {\r\n    await axios\r\n      .put(\r\n        `${BASE_URL}task/update-task`,\r\n        {\r\n          taskId: taskId,\r\n          inspectorId: inspectorId,\r\n          cleanerId: cleanerId,\r\n          roomId: roomId\r\n        },\r\n        { headers: { Authorization: `Bearer ${access_token}` } }\r\n      )\r\n      .then(response => {\r\n        setResponseMessage(response.data.message);\r\n        navigate('/home/tasks');\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n  const deleteTask = async taskId => {\r\n    await axios\r\n      .delete(`${BASE_URL}task/delete-task`, {\r\n        data: { taskId: taskId },\r\n        headers: { Authorization: `Bearer ${access_token}` }\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n      })\r\n      .catch(error => {\r\n        if (error.response) {\r\n          const { status, data } = error.response;\r\n          if (status === 400 && data && data.message) {\r\n            setResponseMessage(data.message);\r\n            console.log('An error occured', data.message);\r\n          } else if (status === 403 && data && data.message) {\r\n            // navigate('/')\r\n          } else {\r\n            console.log('Axios error:', error);\r\n          }\r\n        } else {\r\n          console.log('Network error:', error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  return {\r\n    getUnAssignedRooms,\r\n    getAllCleaners,\r\n    getAllInspectors,\r\n    unAssignedRooms,\r\n    allCleaners,\r\n    allInspectors,\r\n    addTask,\r\n    getAllTasks,\r\n    allTasks,\r\n    deleteTask,\r\n    activeCleaners,\r\n    everyTask,\r\n    activeInspectors,\r\n    getTaskById,\r\n    singleTaskDetail,\r\n    updateTask,\r\n    responseMessage,\r\n    getCleaningItems,\r\n    cleaningItems,\r\n    activeCleaningItems\r\n  };\r\n};\r\nexport default useTask;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport useTask from '../../../Hooks/useTask';\r\nimport { Grid, Typography, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button, Box } from '@mui/material';\r\n\r\nconst TaskDetails = () => {\r\n  const { taskId } = useParams();\r\n  const [selectedCleaner, setSelectedCleaner] = useState('');\r\n  const [selectedInspector, setSelectedInspector] = useState('');\r\n  const { getAllCleaners, getAllInspectors, getTaskById, updateTask, allCleaners, allInspectors, singleTaskDetail } = useTask();\r\n\r\n  useEffect(() => {\r\n    const fetchAllCleaners = async () => {\r\n      await getAllCleaners();\r\n    };\r\n    const fetchAllInspectors = async () => {\r\n      await getAllInspectors();\r\n    };\r\n    const fetchSingleTask = async () => {\r\n      await getTaskById(taskId);\r\n    };\r\n\r\n    fetchAllCleaners();\r\n    fetchAllInspectors();\r\n    fetchSingleTask();\r\n  }, []);\r\n\r\n  const handleUpdate = async () => {\r\n    await updateTask(taskId, selectedCleaner, selectedInspector, singleTaskDetail.assigned_room._id);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: 'white',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: '20px'\r\n      }}\r\n    >\r\n      <Grid item xs={12} md={8} lg={6}>\r\n        <Typography variant=\"h2\" gutterBottom textAlign=\"center\">\r\n          Task Details\r\n        </Typography>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Room: {singleTaskDetail?.assigned_room?.roomName}\r\n        </Typography>\r\n        <FormControl component=\"fieldset\" fullWidth>\r\n          <FormLabel component=\"legend\">Cleaners</FormLabel>\r\n          <RadioGroup\r\n            name=\"selectedCleaner\"\r\n            value={selectedCleaner}\r\n            onChange={(event) => setSelectedCleaner(event.target.value)}\r\n            sx={{ display: 'flex', flexDirection: 'column' }}\r\n          >\r\n            {allCleaners.map((cleaner) => (\r\n              <FormControlLabel\r\n                key={cleaner._id}\r\n                value={cleaner._id}\r\n                control={<Radio />}\r\n                label={cleaner.username}\r\n                sx={{ flexDirection: 'row' }}\r\n              />\r\n            ))}\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <FormControl component=\"fieldset\" fullWidth>\r\n          <FormLabel component=\"legend\">Inspectors</FormLabel>\r\n          <RadioGroup\r\n            name=\"selectedInspector\"\r\n            value={selectedInspector}\r\n            onChange={(event) => setSelectedInspector(event.target.value)}\r\n            sx={{ display: 'flex', flexDirection: 'column' }}\r\n          >\r\n            {allInspectors.map((inspector) => (\r\n              <FormControlLabel\r\n                key={inspector._id}\r\n                value={inspector._id}\r\n                control={<Radio />}\r\n                label={inspector.username}\r\n                sx={{ flexDirection: 'row' }}\r\n              />\r\n            ))}\r\n          </RadioGroup>\r\n        </FormControl>\r\n        <Box textAlign=\"center\" marginTop={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!selectedCleaner || !selectedInspector || singleTaskDetail.isSubmitted}\r\n            onClick={handleUpdate}\r\n          >\r\n            Update\r\n          </Button>\r\n        </Box>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TaskDetails;\r\n"],"names":["useTask","BASE_URL","process","responseMessage","setResponseMessage","useState","unAssignedRooms","setUnAssignedRooms","allCleaners","setAllCleaners","allInspectors","setAllInspectors","singleTaskDetail","setSingleTaskDetail","cleaningItems","setCleaningItems","allTasks","setAllTasks","activeCleaners","setActiveCleaners","activeInspectors","setActiveInspectors","activeCleaningItems","setActiveCleaningItems","everyTask","setEveryTask","navigate","useNavigate","access_token","localStorage","getItem","getUnAssignedRooms","async","axios","get","concat","headers","Authorization","then","response","console","log","data","roomsNotInTasks","catch","error","status","message","getAllCleaners","length","getAllInspectors","addTask","roomId","cleanerId","inspectorId","post","getAllTasks","deleteTask","delete","taskId","getTaskById","updateTask","put","getCleaningItems","allItems","TaskDetails","_singleTaskDetail$ass","useParams","selectedCleaner","setSelectedCleaner","selectedInspector","setSelectedInspector","useEffect","fetchAllCleaners","fetchAllInspectors","fetchSingleTask","_jsx","Box","sx","backgroundColor","height","display","flexDirection","alignItems","justifyContent","borderRadius","children","_jsxs","Grid","item","xs","md","lg","Typography","variant","gutterBottom","textAlign","assigned_room","roomName","FormControl","component","fullWidth","FormLabel","RadioGroup","name","value","onChange","event","target","map","cleaner","FormControlLabel","_id","control","Radio","label","username","inspector","marginTop","Button","color","disabled","isSubmitted","onClick"],"sourceRoot":""}